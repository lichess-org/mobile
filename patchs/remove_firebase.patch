diff --git a/android/app/build.gradle.kts b/android/app/build.gradle.kts
index 3d87e06ec..22150f493 100644
--- a/android/app/build.gradle.kts
+++ b/android/app/build.gradle.kts
@@ -6,8 +6,6 @@ plugins {
     id("kotlin-android")
     // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
     id("dev.flutter.flutter-gradle-plugin")
-    id("com.google.gms.google-services")
-    id("com.google.firebase.crashlytics")
 }
 
 val keystoreProperties = Properties()
diff --git a/android/settings.gradle.kts b/android/settings.gradle.kts
index 952468b72..ab39a10a2 100644
--- a/android/settings.gradle.kts
+++ b/android/settings.gradle.kts
@@ -20,8 +20,6 @@ plugins {
     id("dev.flutter.flutter-plugin-loader") version "1.0.0"
     id("com.android.application") version "8.7.3" apply false
     id("org.jetbrains.kotlin.android") version "2.1.0" apply false
-    id("com.google.gms.google-services") version "4.4.0" apply false
-    id("com.google.firebase.crashlytics") version "2.9.9" apply false
 }
 
 include(":app")
diff --git a/lib/firebase_options.dart b/lib/firebase_options.dart
deleted file mode 100644
index 246b27938..000000000
--- a/lib/firebase_options.dart
+++ /dev/null
@@ -1,66 +0,0 @@
-// File generated by FlutterFire CLI.
-// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
-import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
-import 'package:flutter/foundation.dart' show defaultTargetPlatform, kIsWeb, TargetPlatform;
-
-/// Default [FirebaseOptions] for use with your Firebase apps.
-///
-/// Example:
-/// ```dart
-/// import 'firebase_options.dart';
-/// // ...
-/// await Firebase.initializeApp(
-///   options: DefaultFirebaseOptions.currentPlatform,
-/// );
-/// ```
-class DefaultFirebaseOptions {
-  static FirebaseOptions get currentPlatform {
-    if (kIsWeb) {
-      throw UnsupportedError(
-        'DefaultFirebaseOptions have not been configured for web - '
-        'you can reconfigure this by running the FlutterFire CLI again.',
-      );
-    }
-    switch (defaultTargetPlatform) {
-      case TargetPlatform.android:
-        return android;
-      case TargetPlatform.iOS:
-        return ios;
-      case TargetPlatform.macOS:
-        throw UnsupportedError(
-          'DefaultFirebaseOptions have not been configured for macos - '
-          'you can reconfigure this by running the FlutterFire CLI again.',
-        );
-      case TargetPlatform.windows:
-        throw UnsupportedError(
-          'DefaultFirebaseOptions have not been configured for windows - '
-          'you can reconfigure this by running the FlutterFire CLI again.',
-        );
-      case TargetPlatform.linux:
-        throw UnsupportedError(
-          'DefaultFirebaseOptions have not been configured for linux - '
-          'you can reconfigure this by running the FlutterFire CLI again.',
-        );
-      default:
-        throw UnsupportedError('DefaultFirebaseOptions are not supported for this platform.');
-    }
-  }
-
-  static const FirebaseOptions android = FirebaseOptions(
-    apiKey: 'AIzaSyDQI6NZ5CM8xpuq9jfM0-D4Tq6fYfsaSh0',
-    appId: '1:974101866555:android:91f3475b526b436bb8541e',
-    messagingSenderId: '974101866555',
-    projectId: 'lichessv2',
-    storageBucket: 'lichessv2.appspot.com',
-  );
-
-  static const FirebaseOptions ios = FirebaseOptions(
-    apiKey: 'AIzaSyC48jXlu52bjsbINcl3ixrrMEAbDf1uh90',
-    appId: '1:974101866555:ios:1974acbdbcbfbe0eb8541e',
-    messagingSenderId: '974101866555',
-    projectId: 'lichessv2',
-    storageBucket: 'lichessv2.appspot.com',
-    iosClientId: '974101866555-8ag66ua0p0pn1ab7u982i58a9iubhbod.apps.googleusercontent.com',
-    iosBundleId: 'org.lichess.mobileV2',
-  );
-}
diff --git a/lib/src/binding.dart b/lib/src/binding.dart
index 5b9e7821c..1a8e63a94 100644
--- a/lib/src/binding.dart
+++ b/lib/src/binding.dart
@@ -1,9 +1,6 @@
-import 'package:firebase_core/firebase_core.dart';
-import 'package:firebase_crashlytics/firebase_crashlytics.dart';
-import 'package:firebase_messaging/firebase_messaging.dart';
 import 'package:flutter/foundation.dart';
 import 'package:flutter/widgets.dart';
-import 'package:lichess_mobile/firebase_options.dart';
+import 'package:lichess_mobile/firebase_stubs.dart';
 import 'package:lichess_mobile/src/log.dart';
 import 'package:lichess_mobile/src/model/engine/engine.dart';
 import 'package:shared_preferences/shared_preferences.dart';
diff --git a/lib/src/model/notifications/notification_service.dart b/lib/src/model/notifications/notification_service.dart
index 053551644..3da39dcda 100644
--- a/lib/src/model/notifications/notification_service.dart
+++ b/lib/src/model/notifications/notification_service.dart
@@ -1,19 +1,15 @@
 import 'dart:async';
 import 'dart:convert';
 
-import 'package:firebase_messaging/firebase_messaging.dart';
-import 'package:flutter/foundation.dart';
 import 'package:flutter_local_notifications/flutter_local_notifications.dart';
 import 'package:flutter_riverpod/flutter_riverpod.dart';
 import 'package:lichess_mobile/l10n/l10n.dart';
 import 'package:lichess_mobile/src/binding.dart';
 import 'package:lichess_mobile/src/localizations.dart';
 import 'package:lichess_mobile/src/model/auth/auth_session.dart';
-import 'package:lichess_mobile/src/model/common/preloaded_data.dart';
 import 'package:lichess_mobile/src/model/notifications/notifications.dart';
 import 'package:lichess_mobile/src/network/connectivity.dart';
 import 'package:lichess_mobile/src/network/http.dart';
-import 'package:lichess_mobile/src/utils/badge_service.dart';
 import 'package:logging/logging.dart';
 import 'package:riverpod_annotation/riverpod_annotation.dart';
 
@@ -109,47 +105,6 @@ class NotificationService {
         }
       }
     });
-
-    // Listen for incoming messages while the app is in the foreground.
-    LichessBinding.instance.firebaseMessagingOnMessage.listen((RemoteMessage message) {
-      _processFcmMessage(message, fromBackground: false);
-    });
-
-    // Listen for incoming messages while the app is in the background.
-    LichessBinding.instance.firebaseMessagingOnBackgroundMessage(
-      _firebaseMessagingBackgroundHandler,
-    );
-
-    // Request permission to receive notifications. Pop-up will appear only
-    // once.
-    await LichessBinding.instance.firebaseMessaging.requestPermission(
-      alert: true,
-      badge: true,
-      sound: true,
-      announcement: false,
-      carPlay: false,
-      criticalAlert: false,
-      provisional: false,
-    );
-
-    // Listen for token refresh and update the token on the server accordingly.
-    _fcmTokenRefreshSubscription = LichessBinding.instance.firebaseMessaging.onTokenRefresh.listen((
-      String token,
-    ) {
-      _registerToken(token);
-    });
-
-    // Get any messages which caused the application to open from
-    // a terminated state.
-    final RemoteMessage? initialMessage = await LichessBinding.instance.firebaseMessaging
-        .getInitialMessage();
-
-    if (initialMessage != null) {
-      _handleFcmMessageOpenedApp(initialMessage);
-    }
-
-    // Handle any other interaction that caused the app to open when in background.
-    LichessBinding.instance.firebaseMessagingOnMessageOpenedApp.listen(_handleFcmMessageOpenedApp);
   }
 
   /// Shows a notification.
@@ -200,98 +155,8 @@ class NotificationService {
     _responseStreamController.add((response, notification));
   }
 
-  /// Handle an FCM message that caused the application to open
-  void _handleFcmMessageOpenedApp(RemoteMessage message) {
-    final parsedMessage = FcmMessage.fromRemoteMessage(message);
-
-    switch (parsedMessage) {
-      case final CorresGameUpdateFcmMessage corresMessage:
-        final notification = CorresGameUpdateNotification.fromFcmMessage(corresMessage);
-        _responseStreamController.add((
-          NotificationResponse(
-            notificationResponseType: NotificationResponseType.selectedNotification,
-            id: notification.id,
-            payload: jsonEncode(notification.payload),
-          ),
-          notification,
-        ));
-
-      // TODO: handle other notification types
-      case UnhandledFcmMessage(data: final data):
-        _logger.warning('Received unhandled FCM notification type: ${data['lichess.type']}');
-
-      case MalformedFcmMessage(data: final data):
-        _logger.severe('Received malformed FCM message: $data');
-    }
-  }
-
-  /// Process a message received from the Firebase Cloud Messaging service.
-  ///
-  /// If the message contains a [RemoteMessage.notification] field and if it is
-  /// received while the app was in foreground, the notification is by default not
-  /// shown to the user.
-  /// Depending on the message type, we may as well show a local notification.
-  ///
-  /// Some messages (whether or not they have an associated notification), have
-  /// a [RemoteMessage.data] field used to update the application state according
-  /// to the message type.
-  ///
-  /// A special data field, 'lichess.iosBadge', is used to update the iOS app's
-  /// badge count according to the value held by the server.
-  Future<void> _processFcmMessage(
-    RemoteMessage message, {
-
-    /// Whether the message was received while the app was in the background.
-    required bool fromBackground,
-  }) async {
-    _logger.fine(
-      'Processing a FCM message from ${fromBackground ? 'background' : 'foreground'}: ${message.data}',
-    );
-
-    final parsedMessage = FcmMessage.fromRemoteMessage(message);
-
-    _fcmMessageStreamController.add((message: parsedMessage, fromBackground: fromBackground));
-
-    switch (parsedMessage) {
-      case CorresGameUpdateFcmMessage(fullId: final fullId, notification: final notification):
-        if (fromBackground == false && notification != null) {
-          await show(CorresGameUpdateNotification(fullId, notification.title!, notification.body!));
-        }
-
-      // TODO: handle other notification types
-
-      case UnhandledFcmMessage(data: final data):
-        _logger.warning('Received unhandled FCM notification type: ${data['lichess.type']}');
-
-      case MalformedFcmMessage(data: final data):
-        _logger.severe('Received malformed FCM message: $data');
-    }
-
-    // update badge
-    final badge = message.data['lichess.iosBadge'] as String?;
-    if (badge != null) {
-      try {
-        await BadgeService.instance.setBadge(int.parse(badge));
-      } catch (e) {
-        _logger.severe('Could not parse badge: $badge');
-      }
-    }
-  }
-
   /// Register the device for push notifications.
-  Future<void> registerDevice() async {
-    if (defaultTargetPlatform == TargetPlatform.iOS) {
-      final apnsToken = await LichessBinding.instance.firebaseMessaging.getAPNSToken();
-      if (apnsToken == null) {
-        _logger.warning('APNS token is null');
-        return;
-      }
-    }
-    final token = await LichessBinding.instance.firebaseMessaging.getToken();
-    if (token != null) {
-      await _registerToken(token);
-    }
-  }
+  Future<void> registerDevice() async {}
 
   /// Unregister the device from push notifications.
   Future<void> unregister() async {
@@ -306,40 +171,4 @@ class NotificationService {
       _logger.severe('could not unregister device; $e', e, st);
     }
   }
-
-  Future<void> _registerToken(String token) async {
-    final settings = await LichessBinding.instance.firebaseMessaging.getNotificationSettings();
-    if (settings.authorizationStatus == AuthorizationStatus.denied) {
-      return;
-    }
-    _logger.info('will register fcmToken: $token');
-    final session = _ref.read(authSessionProvider);
-    if (session == null) {
-      return;
-    }
-    try {
-      await _ref.withClient((client) => client.post(Uri(path: '/mobile/register/firebase/$token')));
-    } catch (e, st) {
-      _logger.severe('could not register device; $e', e, st);
-    }
-  }
-
-  @pragma('vm:entry-point')
-  static Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {
-    // create a new provider scope for the background isolate
-    final ref = ProviderContainer();
-
-    final lichessBinding = AppLichessBinding.ensureInitialized();
-    await lichessBinding.preloadSharedPreferences();
-    await ref.read(preloadedDataProvider.future);
-
-    try {
-      await ref.read(notificationServiceProvider)._processFcmMessage(message, fromBackground: true);
-
-      ref.dispose();
-    } catch (e) {
-      _logger.severe('Error when processing an FCM background message: $e');
-      ref.dispose();
-    }
-  }
 }
diff --git a/lib/src/model/notifications/notifications.dart b/lib/src/model/notifications/notifications.dart
index acc4fba56..848eecca3 100644
--- a/lib/src/model/notifications/notifications.dart
+++ b/lib/src/model/notifications/notifications.dart
@@ -1,8 +1,8 @@
 import 'dart:convert';
 
 import 'package:deep_pick/deep_pick.dart';
-import 'package:firebase_messaging/firebase_messaging.dart';
 import 'package:flutter_local_notifications/flutter_local_notifications.dart';
+import 'package:lichess_mobile/firebase_stubs.dart';
 import 'package:lichess_mobile/l10n/l10n.dart';
 import 'package:lichess_mobile/src/model/challenge/challenge.dart';
 import 'package:lichess_mobile/src/model/common/id.dart';
diff --git a/pubspec.lock b/pubspec.lock
index 039b49781..71eb99047 100644
--- a/pubspec.lock
+++ b/pubspec.lock
@@ -9,14 +9,6 @@ packages:
       url: "https://pub.dev"
     source: hosted
     version: "82.0.0"
-  _flutterfire_internals:
-    dependency: transitive
-    description:
-      name: _flutterfire_internals
-      sha256: a5788040810bd84400bc209913fbc40f388cded7cdf95ee2f5d2bff7e38d5241
-      url: "https://pub.dev"
-    source: hosted
-    version: "1.3.58"
   analyzer:
     dependency: transitive
     description:
@@ -481,70 +473,6 @@ packages:
       url: "https://pub.dev"
     source: hosted
     version: "0.9.3+4"
-  firebase_core:
-    dependency: "direct main"
-    description:
-      name: firebase_core
-      sha256: c6e8a6bf883d8ddd0dec39be90872daca65beaa6f4cff0051ed3b16c56b82e9f
-      url: "https://pub.dev"
-    source: hosted
-    version: "3.15.1"
-  firebase_core_platform_interface:
-    dependency: transitive
-    description:
-      name: firebase_core_platform_interface
-      sha256: "5dbc900677dcbe5873d22ad7fbd64b047750124f1f9b7ebe2a33b9ddccc838eb"
-      url: "https://pub.dev"
-    source: hosted
-    version: "6.0.0"
-  firebase_core_web:
-    dependency: transitive
-    description:
-      name: firebase_core_web
-      sha256: "0ed0dc292e8f9ac50992e2394e9d336a0275b6ae400d64163fdf0a8a8b556c37"
-      url: "https://pub.dev"
-    source: hosted
-    version: "2.24.1"
-  firebase_crashlytics:
-    dependency: "direct main"
-    description:
-      name: firebase_crashlytics
-      sha256: c441c40317bbea4380ee6b0df83bdb408e9000f7f9ebbc683f9ed71c366f0a97
-      url: "https://pub.dev"
-    source: hosted
-    version: "4.3.9"
-  firebase_crashlytics_platform_interface:
-    dependency: transitive
-    description:
-      name: firebase_crashlytics_platform_interface
-      sha256: bb948241a48d497bf39af5cf19b0d9b28bb6b26274164141a203ff3c3202d41b
-      url: "https://pub.dev"
-    source: hosted
-    version: "3.8.9"
-  firebase_messaging:
-    dependency: "direct main"
-    description:
-      name: firebase_messaging
-      sha256: "0f3363f97672eb9f65609fa00ed2f62cc8ec93e7e2d4def99726f9165d3d8a73"
-      url: "https://pub.dev"
-    source: hosted
-    version: "15.2.9"
-  firebase_messaging_platform_interface:
-    dependency: transitive
-    description:
-      name: firebase_messaging_platform_interface
-      sha256: "7a05ef119a14c5f6a9440d1e0223bcba20c8daf555450e119c4c477bf2c3baa9"
-      url: "https://pub.dev"
-    source: hosted
-    version: "4.6.9"
-  firebase_messaging_web:
-    dependency: transitive
-    description:
-      name: firebase_messaging_web
-      sha256: a4547f76da2a905190f899eb4d0150e1d0fd52206fce469d9f05ae15bb68b2c5
-      url: "https://pub.dev"
-    source: hosted
-    version: "3.10.9"
   fixnum:
     dependency: transitive
     description:
@@ -642,10 +570,10 @@ packages:
     dependency: transitive
     description:
       name: flutter_local_notifications_windows
-      sha256: f8fc0652a601f83419d623c85723a3e82ad81f92b33eaa9bcc21ea1b94773e6e
+      sha256: "593625e6833c0def4853b361c5276464b314983c6c819178bf0fa5aba2540d86"
       url: "https://pub.dev"
     source: hosted
-    version: "1.0.0"
+    version: "1.0.1"
   flutter_localizations:
     dependency: "direct main"
     description: flutter
@@ -1654,10 +1582,10 @@ packages:
     dependency: "direct main"
     description:
       name: url_launcher
-      sha256: "9d06212b1362abc2f0f0d78e6f09f726608c74e3b9462e8368bb03314aa8d603"
+      sha256: f6a7e5c4835bb4e3026a04793a4199ca2d14c739ec378fdfe23fc8075d0439f8
       url: "https://pub.dev"
     source: hosted
-    version: "6.3.1"
+    version: "6.3.2"
   url_launcher_android:
     dependency: transitive
     description:
diff --git a/pubspec.yaml b/pubspec.yaml
index e06d4cd61..4f9cadaff 100644
--- a/pubspec.yaml
+++ b/pubspec.yaml
@@ -27,9 +27,6 @@ dependencies:
   device_info_plus: ^11.0.0
   dynamic_system_colors: ^1.8.0
   fast_immutable_collections: ^11.0.0
-  firebase_core: ^3.0.0
-  firebase_crashlytics: ^4.0.0
-  firebase_messaging: ^15.0.0
   fl_chart: ^1.0.0
   flutter:
     sdk: flutter
